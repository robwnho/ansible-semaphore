- name: Instala e registra o Zabbix Agent no Windows (Zabbix 6.4)
  hosts: windows
  gather_facts: yes

  vars:
    zabbix_server_ip: "192.168.200.37"
    zabbix_api_url: "http://192.168.200.37/zabbix"
    zabbix_api_user: "Admin"
    zabbix_api_pass: '33Uy`Njjr/Mnn$.$/C1N'
    zabbix_host_group: "SERVIDORES ARKLOK"
    zabbix_template_name: "Windows by Zabbix agent"
    zabbix_agent_version: "6.4.10"
    zabbix_major_version: "6.4"
    zabbix_install_path: 'C:\zabbix'

  tasks:
    - name: Baixar instalador do Zabbix Agent 6.4 para Windows
      win_get_url:
        url: "https://cdn.zabbix.com/zabbix/binaries/stable/{{ zabbix_major_version }}/{{ zabbix_agent_version }}/zabbix_agent-{{ zabbix_agent_version }}-windows-amd64-openssl.msi"
        dest: "{{ zabbix_install_path }}\\zabbix_agent.msi"

    - name: Instalar Zabbix Agent
      win_package:
        path: "{{ zabbix_install_path }}\\zabbix_agent.msi"
        state: present
        arguments: "/quiet SERVER={{ zabbix_server_ip }} SERVERACTIVE={{ zabbix_server_ip }} HOSTNAME={{ inventory_hostname }}"

    - name: Iniciar e configurar Zabbix Agent como automático
      win_service:
        name: Zabbix Agent
        start_mode: auto
        state: started

    - name: Gerar nome do host Zabbix baseado no IP
      set_fact:
        zabbix_hostname: >-
          {{
            (
              ('EQUINIX SP3 - ' if ansible_facts['ansible_default_ipv4']['address'].startswith('192.168') else
               'ALPHAVILLE - ' if ansible_facts['ansible_default_ipv4']['address'].startswith('10.10.4') else
               'ITAPEVI - ' if ansible_facts['ansible_default_ipv4']['address'].startswith('10.10.0') or ansible_facts['ansible_default_ipv4']['address'].startswith('172.18') else
               'DESCONHECIDO - ')
              + ansible_facts['ansible_hostname'] | upper
            ).strip()
          }}

    - name: Autenticar na API Zabbix e obter token
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        body:
          jsonrpc: "2.0"
          method: "user.login"
          params:
            username: "{{ zabbix_api_user }}"
            password: "{{ zabbix_api_pass }}"
          id: 1
          auth: null
      register: zabbix_auth_response

    - name: Verificar se o host já existe
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        body:
          jsonrpc: "2.0"
          method: "host.get"
          params:
            filter:
              host: ["{{ zabbix_hostname }}"]
          auth: "{{ zabbix_auth_response.json.result }}"
          id: 2
      register: zabbix_host_check

    - name: Buscar o groupid
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        body:
          jsonrpc: "2.0"
          method: "hostgroup.get"
          params:
            filter:
              name: ["{{ zabbix_host_group }}"]
          auth: "{{ zabbix_auth_response.json.result }}"
          id: 3
      register: zabbix_group_response

    - name: Definir groupid
      set_fact:
        zabbix_groupid: "{{ zabbix_group_response.json.result[0].groupid | int }}"

    - name: Buscar o template
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid", "name"]
            filter:
              host: ["{{ zabbix_template_name }}"]
          auth: "{{ zabbix_auth_response.json.result }}"
          id: 4
      register: zabbix_template_response

    - name: Definir templateid
      set_fact:
        zabbix_templateid: "{{ zabbix_template_response.json.result[0].templateid | int }}"

    - name: Criar host no Zabbix se não existir
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        body_format: json
        headers:
          Content-Type: "application/json"
        body: >
          {
            "jsonrpc": "2.0",
            "method": "host.create",
            "params": {
              "host": "{{ zabbix_hostname }}",
              "interfaces": [
                {
                  "type": 1,
                  "main": 1,
                  "useip": 1,
                  "ip": "{{ ansible_facts['ansible_default_ipv4']['address'] }}",
                  "dns": "",
                  "port": "10050"
                }
              ],
              "groups": [
                { "groupid": {{ zabbix_groupid }} }
              ],
              "templates": [
                { "templateid": {{ zabbix_templateid }} }
              ]
            },
            "auth": "{{ zabbix_auth_response.json.result }}",
            "id": 5
          }
      when: zabbix_host_check.json.result | length == 0
      register: zabbix_create_result

    - name: Mostrar resposta da criação
      debug:
        var: zabbix_create_result.json
      when: zabbix_host_check.json.result | length == 0
