- name: Aplicar atualizações do Windows
  hosts: all
  gather_facts: yes
  vars:
    initial_reboot: |-
      {{ 86400 <
          (( ((ansible_date_time.date+" "+ansible_date_time.time)|to_datetime('%Y-%m-%d %H:%M:%S')) -
              ansible_facts.lastboot|to_datetime('%Y-%m-%d %H:%M:%SZ')).total_seconds())|abs }}

  tasks:

  # Reinicie os sistemas se estiverem ativos por mais de um dia
  # dessa forma, sabemos que o sistema conseguiu voltar
  # antes que as atualizações fossem aplicadas
  - name: Reiniciar se o sistema tiver um tempo de atividade grande
    win_reboot:
    when: initial_reboot and not ansible_check_mode
    tags:
    - never
    - reboot

  - block:
    - name: >
        {{ 'Instalar' if 'install' in ansible_run_tags else 'Pesquisar' }} atualizações
        {{ 'reiniciará automaticamente' if 'reboot' in ansible_run_tags else 'sem reinicialização' }}
      win_updates:
        category_names:
          - SecurityUpdates
          - CriticalUpdates
          - UpdateRollups
          - DefinitionUpdates
          - Updates
        reboot: "{{ 'yes' if 'reboot' in ansible_run_tags else 'no' }}"
        state: "{{ 'installed' if 'install' in ansible_run_tags else 'searched' }}"
      become: yes
      become_method: runas
      become_user: SYSTEM
      register: update_results
      tags:
      - never
      - install
      - check

    rescue:
    - name: A atualização do Windows falhou?
      debug:
        msg: "error: {{ update_results.msg }}"
      when: update_results is failed and update_results.msg is defined
      tags:
      - always
    - name: O servidor tinha reinicializações pendentes?
      win_reboot:
      when:  not ansible_check_mode and
            update_results is failed and
            update_results.msg is search('A reboot is required')
      tags:
      - never
      - reboot

    always:
    - name: Relatar resultados
      debug:
        var: update_results
      tags:
      - never
      - install
      - check
